import pandas as pd
import json

def load_data(file_path):
    """
    Load data from a CSV file.
    Args:
        file_path (str): The path to the CSV file.
    Returns:
        pd.DataFrame: The loaded data frame.
    """
    return pd.read_csv(file_path)

def preprocess_data(df):
    """
    Preprocess the data frame.
    Args:
        df (pd.DataFrame): The input data frame.
    Returns:
        pd.DataFrame: The preprocessed data frame.
    """
    df['order_date'] = pd.to_datetime(df['order_date'])
    df['revenue'] = df['product_price'] * df['quantity']
    df['month'] = df['order_date'].dt.to_period('M')
    return df

def compute_monthly_revenue(df):
    """
    Compute the total revenue generated by the online store for each month.
    Args:
        df (pd.DataFrame): The input data frame.
    Returns:
        str: The resultant JSON output.
    """
    monthly_revenue = df.groupby('month')['revenue'].sum().reset_index()
    monthly_revenue['month'] = monthly_revenue['month'].astype(str)
    return monthly_revenue.to_json(orient='records')

def compute_product_revenue(df):
    """
    Compute the total revenue generated by each product.
    Args:
        df (pd.DataFrame): The input data frame.
    Returns:
        str: The resultant JSON output.
    """
    product_revenue = df.groupby('product_name')['revenue'].sum().reset_index()
    return product_revenue.to_json(orient='records')

def compute_customer_revenue(df):
    """
    Compute the total revenue generated by each customer.
    Args:
        df (pd.DataFrame): The input data frame.
    Returns:
        str: The resultant JSON output.
    """
    customer_revenue = df.groupby('customer_id')['revenue'].sum().reset_index()
    return customer_revenue.to_json(orient='records')

def compute_top_customers(df, top_n=10):
    """
    Identify the top customers by revenue generated.
    Args:
        df (pd.DataFrame): The input data frame.
        top_n (int): Number of top customers to identify.
    Returns:
        str: The resultant JSON output.
    """
    customer_revenue = df.groupby('customer_id')['revenue'].sum().reset_index()
    top_customers = customer_revenue.sort_values(by='revenue', ascending=False).head(top_n)
    return top_customers.to_json(orient='records')

def generate_output(df):
    """
    Generate the final output in the specified JSON format.
    Args:
        df (pd.DataFrame): The input data frame.
    Returns:
        list: The resultant JSON output as a list of dictionaries.
    """
    return [
        {
            "question": 1,
            "description": "Compute the total revenue generated by the online store for each month in the dataset.",
            "solution": json.loads(compute_monthly_revenue(df))
        },
        {
            "question": 2,
            "description": "Compute the total revenue generated by each product in the dataset.",
            "solution": json.loads(compute_product_revenue(df))
        },
        {
            "question": 3,
            "description": "Compute the total revenue generated by each customer in the dataset.",
            "solution": json.loads(compute_customer_revenue(df))
        },
        {
            "question": 4,
            "description": "Identify the top 10 customers by revenue generated.",
            "solution": json.loads(compute_top_customers(df))
        }
    ]

def save_output(output, file_path='output.json'):
    """
    Save the output to a JSON file.
    Args:
        output (list): The output data to save.
        file_path (str): The path to the output file.
    """
    with open(file_path, 'w') as f:
        json.dump(output, f, indent=4)

def main(file_path='orders.csv', output_file='output.json'):
    """
    Main function to execute the tasks.
    Args:
        file_path (str): The path to the CSV file.
        output_file (str): The path to the output JSON file.
    """
    try:
        df = load_data(file_path)
        df = preprocess_data(df)
        output = generate_output(df)
        save_output(output, output_file)
        print(json.dumps(output, indent=4))
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
